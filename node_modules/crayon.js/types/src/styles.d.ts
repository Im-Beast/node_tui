import { GetMapKeys } from "./util.js";
/** ANSI escape code */
export declare type StyleCode = "" | `\x1b[${number}m` | `\x1b[${number};5;${number}m` | `\x1b[${number};2;${number};${number};${number}m`;
/** Colors used to generate all 4bit colors */
declare const baseColors: readonly ["black", "red", "green", "yellow", "blue", "magenta", "cyan", "white"];
export declare type BaseColors = typeof baseColors[number];
/** Names for all 4bit colors */
export declare type Color = BaseColors | `bg${Capitalize<BaseColors>}` | `light${Capitalize<BaseColors>}` | `bgLight${Capitalize<BaseColors>}`;
/** Map containing all 4bit colors */
export declare const colors: Map<Color, () => StyleCode>;
/** Map containing all supported attributes */
export declare const attributes: Map<"blink" | "bold" | "hidden" | "reset" | "dim" | "italic" | "underline" | "fastBlink" | "invert" | "strikethrough" | "boldOff" | "doubleUnderline" | "boldOrDimOff" | "italicOff" | "underlineOff" | "blinkOff" | "invertOff" | "hiddenOff" | "strikethroughOff", "\u001B[0m" | "\u001B[1m" | "\u001B[2m" | "\u001B[3m" | "\u001B[4m" | "\u001B[5m" | "\u001B[6m" | "\u001B[7m" | "\u001B[8m" | "\u001B[9m" | "\u001B[21m" | "\u001B[22m" | "\u001B[23m" | "\u001B[24m" | "\u001B[25m" | "\u001B[26m" | "\u001B[27m" | "\u001B[28m">;
/** All supported attributes */
export declare type Attribute = GetMapKeys<typeof attributes>;
/** Every possible style */
export declare type Style = Attribute | Color;
/**
 * Retrieve style using string
 * @param style - map key
 */
export declare function keyword(style: Style): StyleCode;
export declare function keyword(style: string): StyleCode;
/** Generate StyleCode from 3bit (8) color pallete */
export declare function ansi3(code: number, bg?: boolean): StyleCode;
/** Generate StyleCode from 4bit (16) color pallete */
export declare function ansi4(code: number, bg?: boolean): StyleCode;
/** Generate StyleCode from 8bit (256) color pallete */
export declare function ansi8(code: number, bg?: boolean): StyleCode;
/** Generate StyleCode from RGB values - 24bit (16.7m) color pallete */
export declare function rgb(r: number, g: number, b: number, bg?: boolean): StyleCode;
/** Generate StyleCode from HSL values - 24bit (16.7m) color pallete */
export declare function hsl(h: number, s: number, l: number, bg?: boolean): StyleCode;
/**
 * Generate StyleCode from HEX value - 24bit (16.7m) color pallete
 * @example
 * ```ts
 * hex(0xFF3060); // <- this is faster
 * hex("#FF3060");
 * ```
 */
export declare function hex(value: string | number, bg?: boolean): StyleCode;
export {};
